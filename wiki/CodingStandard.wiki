#labels Phase-QA
#Describe all rules which must be respected in Rolisteam Source code files.


= Introduction =

This page is made for help rolisteam developers to improve the quality of their work. 
So, We need to respect few rules to prevent any troubles. Please, read this,attentively!

=Rule 0=
Write it in English!!

=1/ Style =

==Rule 1.1: Class==
    each word of class name, structures, typedef and enum identifier must start with uppercase letter. 
Example : _class GameServer_

==Rule 1.2: Variable== 
The first word starts with lowercase letter. All other words start with uppercase letter.
Example : _int documentCount=0_

<font color="f00">Do not use the [http://en.wikipedia.org/wiki/Hungarian_notation Hungrarian notation]</font>

==Rule 1.3: member==
    All class members must have "*`m_`*" as prefix. 
Example : _int m_clientId = 0_

==Rule 1.4 : global variables== 
   Please, do not use global variables. If you can't do by another way use the "*`g_`*" preffix.

==Rule 1.5 : line length==
   Source lines must be equal or lesser than 120 characters.

==Rule 1.6 : readability==
    One instruction per line

==Rule 1.7 : indentation==
   Indentation step is four spaces. Do not use "tabs".

==Rule 1.8 : relevance==
   Please, use relevant identifier names. And use full English word.

==Rule 1.9 : Public, protected and private section==
    The class definition start with the public section, followed by the protected one and at last, the private one. 
Example :
{{{
class Person
{
public:
    Person();
protected:
    /*Somethings..*/
private:
   QString* m_name;
}
}}}
==Rule 1.10 : Comments==   
    All Comments are one a line by themselves. 
Example : 
{{{
int result = rand();//bad

//good
int result = rand();
}}}
==Rule 1.11 : instruction block==
   The braces must be placed in the same column, on separate lines directly before and after the block. (Allman/BSD style)
Example :
{{{
if (varName == name)
{
}
else
{
}
}}}

==Rule 1.12 : Qt==
    Use Qt's classes as much as you can.

=2/ Code Size and Complexity==

==Rule 2.1 : function size==
    Any one function must contain no more than 200 instruction lines.

==Rule 2.2 : Function path=
   Any one function can contain 20 different path or less.

Example : this function has two different path.
{{{
void DrawWindows::DrawScene
{
    if(this->visible())
    {
         /*do something*/

    }
    else
    {
        /*do something else*/
    }
}
}}}

=3/ Header Files=

==Rule 3.1==
    Header files contain the declarations only. 

==Rule 3.2==
    Header files must prevent multiple inclusions of themselves.

==Rule 3.3==
   Do not include unnecessary files. 
   
==Rule 3.4==
   Use forward declarations for any member which is either a reference or pointer.

==Rule 3.5 : Naming files==
   Hearder files have the ".h" extension.

==Rule 3.6 : license text==
   Header files must start with license instructions.

=4/ Class files=

==Rule 4.1 : Constructor==
   The first function definitions have to be the constructors (the default in first). 
   Followed by the destructor. 

==Rule 4.2 : naming files==
   Class files have the .cpp extension and they have to keep the same name that the header file. File are written with lowercase letters.
Example:
class Person
person.h
person.cpp

==Rule 4.3 : license text==
   cpp files must start with license instructions.


=5/ Comments=

==Rule 5.1==
   Each functions must be commented in the header file. Please, use Doxygen Tags as follow:

{{{
/**
 * @brief Hide an internal window.
 * 
 * @param windowHandle the identifier of the window to be hide.
 * @return Whether or not the windows was successfully hidden.
 */
bool Workspace::HideWindows(int windowHandle)
}}}

PS: Add @param line per parameter.

==Rule 5.2==
    Each class have a comment section as follow:
Example:
{{{
/**
 * @brief Manage the workspace
 * @version 1.0
 * @date 01/01/2010
 */
}}}

==Rule 5.3==
    Feel free to add bug, warning or Todo items, in the class/function comment section.

Example :
{{{
 * @bug SegFault when ....
 * @warning Make sure ....
 * @todo Refactoring in two functions.
}}}
=Example=
{{{
/***************************************************************************
 *	Copyright (C) 2007 by Romain Campioni   			   *
 *	Copyright (C) 2009 by Renaud Guezennec                             *
 *                                                                         *
 *                                                                         *
 *   rolisteam is free software; you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef DISPLAY_DISK_H
#define DISPLAY_DISK_H

#include <QWidget>


/**
 *
 * @brief Display a disk                                    
 * @version 1.0
 * @date 10/01/2009
 *                                                     
 */
class DisplayDisk : public QWidget
{
    Q_OBJECT

    public :
        /**
         * @brief Constructor 
         * 
         * @param parent its parent widget
         * @param fill the disk must be filled or not.
         * @param minimum set the minimum diameter
         */
        DisplayDisk(QWidget *parent = 0, bool fill = true, int minimum = 1);

    public slots :
        /**
         * @brief Change the diameter of the disk and call to redraw it
         * 
         * @param newDiameter the new diameter
         */
        void changeDiameter(int newDiameter);
    protected:
        /**
         * @brief Overwriting the paintevent. To draw the disk. 
         * 
         * @param event gathering many details about the event.
         */
        void paintEvent(QPaintEvent *event);
    private :
        /**
         * store the current diameter
         */
        int m_currentDiameter;

        /**
         * store the minimum diameter
         */
        int m_minimumDiameter;


        /**
         * store fill state
         */
        bool m_fill;
};

#endif

}}}

















`

